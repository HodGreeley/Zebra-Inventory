[{"controllers": {"compact": "/pools/default/buckets/inventory/ddocs/_design%2Fsync_gateway_2.0/controller/compactView", "setUpdateMinChanges": "/pools/default/buckets/inventory/ddocs/_design%2Fsync_gateway_2.0/controller/setUpdateMinChanges"}, "doc": {"json": {"index_xattr_on_deleted_docs": true, "views": {"channels": {"map": "function (doc, meta) {\n\t                    var sync\n\t\t\t\t\t\t\tif (meta.xattrs === undefined || meta.xattrs._sync === undefined) {\n\t\t                        sync = doc._sync\n\t\t                  \t} else {\n\t\t                       \tsync = meta.xattrs._sync\n\t\t                    }\n\t\t                     \n\t                    if (sync === undefined || meta.id.substring(0,6) == \"_sync:\")\n\t                        return;\n\t\t\t\t\t\tvar sequence = sync.sequence;\n\t                    if (sequence === undefined)\n\t                        return;\n\t                    var value = {rev:sync.rev};\n\t                    if (sync.flags) {\n\t                    \tvalue.flags = sync.flags\n\t                    } else if (sync.deleted) {\n\t                    \tvalue.flags = 1 // channels.Deleted\n\t                    }\n\t                    if (true) // EnableStarChannelLog\n\t\t\t\t\t\t\temit([\"*\", sequence], value);\n\t\t\t\t\t\tvar channels = sync.channels;\n\t\t\t\t\t\tif (channels) {\n\t\t\t\t\t\t\tfor (var name in channels) {\n\t\t\t\t\t\t\t\tremoved = channels[name];\n\t\t\t\t\t\t\t\tif (!removed)\n\t\t\t\t\t\t\t\t\temit([name, sequence], value);\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tvar flags = removed.del ? 3 : 2; // channels.Removed/Deleted\n\t\t\t\t\t\t\t\t\temit([name, removed.seq], {rev:removed.rev, flags: flags});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}"}, "access_vbseq": {"map": "function (doc, meta) {\n\t\t                    var sync\n\t\t\t\t\t\t\tif (meta.xattrs === undefined || meta.xattrs._sync === undefined) {\n\t\t                        sync = doc._sync\n\t\t                  \t} else {\n\t\t                       \tsync = meta.xattrs._sync\n\t\t                    }\n\t\t                     \n\t\t                    if (sync === undefined || meta.id.substring(0,6) == \"_sync:\")\n\t\t                        return;\n\t\t                    var access = sync.access;\n\t\t                    if (access) {\n\t\t                        for (var name in access) {\n\t\t                        \t// Build a timed set based on vb and vbseq of this revision\n\t\t                        \tvar value = {};\n\t\t                        \tfor (var channel in access[name]) {\n\t\t                        \t\tvar timedSetWithVbucket = {};\n\t\t\t\t                        timedSetWithVbucket[\"vb\"] = parseInt(meta.vb, 10);\n\t\t\t\t                        timedSetWithVbucket[\"seq\"] = parseInt(meta.seq, 10);\n\t\t\t\t                        value[channel] = timedSetWithVbucket;\n\t\t\t                        }\n\t\t                            emit(name, value)\n\t\t                        }\n\n\t\t                    }\n\t\t               }"}, "role_access_vbseq": {"map": "function (doc, meta) {\n\t\t                    var sync\n\t\t\t\t\t\t\tif (meta.xattrs === undefined || meta.xattrs._sync === undefined) {\n\t\t                        sync = doc._sync\n\t\t                  \t} else {\n\t\t                       \tsync = meta.xattrs._sync\n\t\t                    }\n\t\t                     \n\t\t                    if (sync === undefined || meta.id.substring(0,6) == \"_sync:\")\n\t\t                        return;\n\t\t                    var access = sync.role_access;\n\t\t                    if (access) {\n\t\t                        for (var name in access) {\n\t\t                        \t// Build a timed set based on vb and vbseq of this revision\n\t\t                        \tvar value = {};\n\t\t                        \tfor (var role in access[name]) {\n\t\t                        \t\tvar timedSetWithVbucket = {};\n\t\t\t\t                        timedSetWithVbucket[\"vb\"] = parseInt(meta.vb, 10);\n\t\t\t\t                        timedSetWithVbucket[\"seq\"] = parseInt(meta.seq, 10);\n\t\t\t\t                        value[role] = timedSetWithVbucket;\n\t\t\t                        }\n\t\t                            emit(name, value)\n\t\t                        }\n\n\t\t                    }\n\t\t               }"}, "role_access": {"map": "function (doc, meta) {\n\t                    var sync\n\t\t\t\t\t\t\tif (meta.xattrs === undefined || meta.xattrs._sync === undefined) {\n\t\t                        sync = doc._sync\n\t\t                  \t} else {\n\t\t                       \tsync = meta.xattrs._sync\n\t\t                    }\n\t\t                     \n\t                    if (sync === undefined || meta.id.substring(0,6) == \"_sync:\")\n\t                        return;\n\t                    var access = sync.role_access;\n\t                    if (access) {\n\t                        for (var name in access) {\n\t                            emit(name, access[name]);\n\t                        }\n\t                    }\n\t               }"}, "access": {"map": "function (doc, meta) {\n\t                    var sync\n\t\t\t\t\t\t\tif (meta.xattrs === undefined || meta.xattrs._sync === undefined) {\n\t\t                        sync = doc._sync\n\t\t                  \t} else {\n\t\t                       \tsync = meta.xattrs._sync\n\t\t                    }\n\t\t                     \n\t                    if (sync === undefined || meta.id.substring(0,6) == \"_sync:\")\n\t                        return;\n\t                    var access = sync.access;\n\t                    if (access) {\n\t                        for (var name in access) {\n\t                            emit(name, access[name]);\n\t                        }\n\t                    }\n\t               }"}, "principals": {"map": "function (doc, meta) {\n\t\t\t\t\t\t\t var prefix = meta.id.substring(0,11);\n\t\t\t\t\t\t\t var isUser = (prefix == \"_sync:user:\");\n\t\t\t\t\t\t\t if (isUser || prefix == \"_sync:role:\")\n\t\t\t                     emit(meta.id.substring(11), isUser); }"}}}, "meta": {"rev": "1-31f43b9a", "id": "_design/sync_gateway_2.0"}}}, {"controllers": {"compact": "/pools/default/buckets/inventory/ddocs/_design%2Fsync_housekeeping_2.0/controller/compactView", "setUpdateMinChanges": "/pools/default/buckets/inventory/ddocs/_design%2Fsync_housekeeping_2.0/controller/setUpdateMinChanges"}, "doc": {"json": {"index_xattr_on_deleted_docs": true, "views": {"all_docs": {"map": "function (doc, meta) {\n                     var sync\n\t\t\t\t\t\t\tif (meta.xattrs === undefined || meta.xattrs._sync === undefined) {\n\t\t                        sync = doc._sync\n\t\t                  \t} else {\n\t\t                       \tsync = meta.xattrs._sync\n\t\t                    }\n\t\t                     \n                     if (sync === undefined || meta.id.substring(0,6) == \"_sync:\")\n                       return;\n                     if ((sync.flags & 1) || sync.deleted)\n                       return;\n                     var channels = sync.channels;\n                     var channelNames = [];\n                     for (ch in channels) {\n                     \tif (channels[ch] == null)\n                     \t\tchannelNames.push(ch);\n                     }\n                     emit(meta.id, {r:sync.rev, s:sync.sequence, c:channelNames}); }", "reduce": "_count"}, "old_revs": {"map": "function (doc, meta) {\n                     if (meta.id.substring(0,10) == \"_sync:rev:\")\n\t                     emit(\"\",null); }", "reduce": "_count"}, "sessions": {"map": "function (doc, meta) {\n                     \tvar prefix = meta.id.substring(0,14);\n                     \tif (prefix == \"_sync:session:\")\n                     \t\temit(doc.username, meta.id);}"}, "tombstones": {"map": "function (doc, meta) {\n                     \tvar sync = meta.xattrs._sync;\n                     \tif (sync !== undefined && sync.tombstoned_at !== undefined)\n                     \t\temit(sync.tombstoned_at, meta.id);}"}, "import": {"map": "function (doc, meta) {\n\t\t\t\t\t var sync\n\t\t\t\t\t\t\tif (meta.xattrs === undefined || meta.xattrs._sync === undefined) {\n\t\t                        sync = doc._sync\n\t\t                  \t} else {\n\t\t                       \tsync = meta.xattrs._sync\n\t\t                    }\n\t\t                     \n                     if(meta.id.substring(0,6) != \"_sync:\") {\n                       var exists = (sync !== undefined);\n                       emit([exists, meta.id], null); } }", "reduce": "_count"}, "all_bits": {"map": "function (doc, meta) {\n                      emit(meta.id, null); }"}}}, "meta": {"rev": "1-a2551b5d", "id": "_design/sync_housekeeping_2.0"}}}]